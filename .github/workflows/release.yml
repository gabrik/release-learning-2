name: release-please
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  checks:
      name: Checks
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Install depdendencies
          run: |
            sudo apt update
            sudo apt install -y protobuf-compiler
        
        - name: Install Rust toolchain
          run: |
              rustup show
              rustup component add rustfmt clippy

        - name: Code format check
          uses: actions-rs/cargo@v1
          with:
            command: fmt
            args: -- --check

        - name: Unit tests
          uses: actions-rs/cargo@v1
          with:
            command: test
            args: --all

        - name: Clippy
          uses: actions-rs/cargo@v1
          with:
            command: clippy
            args: --all-targets -- -D warnings

        - name: Clippy unstable
          uses: actions-rs/cargo@v1
          with:
            command: clippy
            args: --all-targets -- -D warnings

        - name: Clean up
          uses: actions-rs/cargo@v1
          with:
            command: clean

  release-please:
    name: release
    needs: [checks]
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          config-file: release-please-config.json
      
      - run: | 
          echo "is release? ${{steps.release.outputs.release_created}}"
          echo "next version is ${{ steps.release.outputs.release_major }}.${{ steps.release.outputs.release_minor }}.${{ steps.release.outputs.release_patch }}"
          echo "tag is ${{ steps.release.outputs.tag_name }}

    outputs:
        release_created:  ${{ steps.release.outputs.release_created }}
        tag_name: ${{ steps.release.outputs.tag_name }}
        upload_url: ${{ steps.release.outputs.upload_url }}
        major:  ${{ steps.release.outputs.release_major }}
        minor: ${{ steps.release.outputs.release_minor }}
        patch: ${{ steps.release.outputs.release_patch }}

  check-version:
    runs-on: ubuntu-latest
    needs: release-please
    steps:
      - env:
          MAJOR: ${{needs.release-please.outputs.major}}
          MINOR: ${{needs.release-please.outputs.minor}}
          PATCH:  ${{needs.release-please.outputs.patch}}
        run: | 
          echo "is release? ${{needs.release-please.outputs.release_created}}"
          echo "next version is $MAJOR $MINOR $PATCH"
          echo "tag is ${{ needs.release-please.outputs.tag_name }}


  publish-js:
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    needs: [release-please]
    steps:
      # The logic below handles the npm publication:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: build
        run: |
            cd clients/nodejs
            yarn install
            yarn run release

  publish-py:
    runs-on: ubuntu-latest
    needs: [release-please]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup env var
        run: |
          VERSION=$(cat << EOF
          '${{ needs.release-please.outputs.major }}'.'${{ needs.release-please.outputs.minor }}'.'${{ needs.release-please.outputs.patch }}''
          EOF
          )
          echo VERSION=$VERSION >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - name: install dependency
        run: pip3 install build wheel setuptools
      - name: build
        run: |
          cd clients/python
          python3 -m build --wheel
        
      - name: upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: clients/python/dist/release_learning-${{ env.VERSION }}-py3-none-any.whl
          asset_name: release_learning--${{ env.VERSION }}-py3-none-any.whl
          asset_content_type: application/zip